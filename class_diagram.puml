/'
This is our model for the class diagram. Whenever you have any remarks
to make regarding one part of the program or another, just make a
comment windows in here like this.
Sign it with your initials as well. -MI
'/

/'
We can have a nice separation of labor: each one of us gets to implement
a max biclique algorithm and one of the following parts:
- Tests
- UI and input
- Graphs and graph parsing.
-MI
'/

@startuml

package bicliques {

' The graph section
package bicliques.graphs {

  interface Graph {
    {method} + getVertices() : Vertex[]
    {method} + getVertexCount() : Integer
    {method} + getEdges() : Edge[]
    {method} + getEdgeCount() : Integer
  }

  interface Vertex {
    {method} + getNeighbours() : Vertex[]
    {method} + getEdges() : Edge[]
  }
  
  interface Edge {
    {method} + getStart() : Node
    {method} + getEnd() : Node
  }

  Vertex -* Graph
  Edge -* Graph
  
}


' The UI section
package bicliques.ui {

/'
For the UI part I say we need to come up with something, that can read in
the text files (I don't want to be copying and pasting stuff in the windows
every time I use it). - MI.
'/

}

' The algorithms section
package bicliques.algorithms {

  class Biclique {
    {field} - left : Vertex[]
    {field} - right : Vertex[]
    {field} - graph : Graph
    {method} + getLeft() : Vertex[]
    {method} + getRight() : Vertex[]
    {method} + getGraph() : Graph[] --o Graph
    {method} + absorbs(Biclique) : boolean
    {method} + adjunction(Biclique) : Biclique[]
  }

  Biclique --* Graph

  interface BicliqueFindingAlgorithm {
    {method} + findMaxBicliques() : Biclique[]
  }

}

package bicliques.test {

/'
The testing that we will need. I say we use junit 4 or 5
to make it more streamlined. -MI
'/

}

}

@enduml
