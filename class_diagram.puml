/'
This is our model for the class diagram. Whenever you have any remarks
to make regarding one part of the program or another, just make a
comment windows in here like this.
Sign it with your initials as well. -MI

Please fill in this form so that I don't have to look through the whole thing again.
Responsibilities:
- Tests: Hadi
- UI: Roland
- Graphs and Bicliques: MI

Algorithms:
MI: ?
RK: MICA
HS: MBEA

I cleared the logs of discussion to reduce clutter. Don't leave long messages in the diagram unless essential. -MI

BipartiteGraph should be implemented since the project description states:
"Given a bipartite graph, find all maximal bicliques." -RK

'/

@startuml

package bicliques {

' The graph section
package bicliques.graphs {

  'Let's stick to naming the vertexes. We don't care about the edges that much.
  ' We just need to be able to show which vertice goes where.
    interface Graph<V, E> {
        {method}{abstract} + getVertices() : Map<V, Vertex<V>>
        {method}{abstract} + getVertexCount() : int
        {method}{abstract} + getEdges() : Map<E, Edge>
        {method}{abstract} + getEdgeCount() : int
        {method}{abstract} + addVertex(V) : void
        {method}{abstract} + addEdge(E, V, V) : void
        {method}{abstract} + addEdge(Vertex<V>, Vertex<V>): void
    }

    interface Edge<E> {
        {method}{abstract} + getElem() : E
        {method}{abstract} + setElem(E) : void
        {method}{abstract} + getStart() : Vertex
        {method}{abstract} + getEnd() : Vertex
    }


    interface Vertex<V> {
        {method}{abstract} + getElem() : V
        {method}{abstract} + setElem(V) : void
        {method}{abstract} + getNeighbours() : Set<Vertex>
        {method}{abstract} + getEdges() : Set<Edge>
    }

  ' as far as the graph implementation goes, it's on whoever one of us takes on it. As long as it sticks
  ' to this interfaces it's fine.
    Graph +-- Edge
    Graph +-- Vertex
    
  ' We will need some graph class to store the graph data, please provide some. -RK
    class SomeGraph<V, E> {
    }
    Graph <|.. SomeGraph
}


' The UI section
package bicliques.ui {

/'
For the UI part I say we need to come up with something, that can read in
the text files (I don't want to be copying and pasting stuff in the windows
every time I use it). - MI.

So do I. In my suggested screenshot of a possible UI the menu would provide
- Input: load (from file) or from input in window
- Output: save (to file)
- Algorithm: choose between several implemented ones
- Help: Description of algorithms and the common "About".
-RK
'/

  class MaxBicliqueGUI {
    {method}{static} + main(String[]): void
  }
}

' The algorithms section
package bicliques.algorithms {

  ' Why should fields have visibiliy "protected" (#)? -RK
  '
  class Biclique {
    {field} # left : Set<Vertex>
    {field} # right : Set<Vertex>
    {field} # graph : Graph
    ' We really need just one. We assume that it spans the whole graph and we know the graph.
	{method} + Biclique(Graph, Set<Vertex>)
    ' no need to keep the mapping here since we can always ask the Graph
    {method} + getLeft() : Set<Vertex>
    {method} + getRight() : Set<Vertex>
    {method} + getGraph() : Graph
    {method} + absorbs(Biclique) : boolean
    {method} + consensus(Biclique) : Set<Biclique>
     ' not completely sure about this one
     ' I would drop it. -RK
     ' What does this method do? -RK
	{method} + extension(Set<Biclique>) : Biclique
  }

  Biclique --* Graph

  interface MaximalBicliquesAlgorithm {
    {method}{abstract} + findMaxBicliques(Graph) : Set<Biclique>
  }

  /'
  MICA algorithm -RK
  '/
  class MICA {
  }
  
  MaximalBicliquesAlgorithm <|.. MICA

 /'
  MBEA algorithm improved for bipartite graphs. -HS
 '/
  class MBEA {
  }
  
  MaximalBicliquesAlgorithm <|.. MBEA
  
  /'
  TODO: Mykyta's algorithm is missing. -RK 
  '/
  
  MaximalBicliquesAlgorithm <|.. MykytasAlgorithm
  
}

package bicliques.test {

/'
The testing that we will need. I say we use junit 4 or 5
to make it more streamlined. -MI
I agree. -RK
I agree. -HS
'/

}


@enduml
